using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace LukaszDrozdzLab1Homework
{
    public partial class FormMain : Form
    {

        /// <summary>
        /// Price of a room.
        /// </summary>
        private uint roomPrice = 3;

        /// <summary>
        /// Price of a floor.
        /// </summary>
        private uint floorPrice = 20;

        /// <summary>
        /// Price of a dorm.
        /// </summary>
        private uint dormPrice = 10;

        /// <summary>
        /// Price of an estate.
        /// </summary>
        private uint estatePrice = 6;


        /// <summary>
        /// Number of students generated every cycle.
        /// </summary>
        public double StudentBaseGenerationRate { get; set; }

        /// <summary>
        /// Number of students generated by a single room.
        /// </summary>
        public double StudentGenerationRate { get; set; }

        /// <summary>
        /// Number of rooms generated by a single floor.
        /// </summary>
        public double RoomGenerationRate { get; set; }

        /// <summary>
        /// Number of floors generated by a single dorm.
        /// </summary>
        public double FloorGenerationRate { get; set; }

        /// <summary>
        /// Number of dorms generated by a single estate.
        /// </summary>
        public double DormGenerationRate { get; set; }

        /// <summary>
        /// The cost of upgrading the base student generation rate.
        /// </summary>
        public uint BaseStudentGenerationUpgradeCost { get; set; }

        /// <summary>
        /// The cost of upgrading the student generation rate.
        /// </summary>
        public uint StudentGenerationUpgradeCost { get; set; }

        /// <summary>
        /// The cost of upgrading the room generation rate.
        /// </summary>
        public uint RoomGenerationUpgradeCost { get; set; }
        
        /// <summary>
        /// The cost of upgrading the floor generation rate.
        /// </summary>
        public uint FloorGenerationUpgradeCost { get; set; }

        /// <summary>
        /// The cost of upgrading the dorm generation rate.
        /// </summary>
        public uint DormGenerationUpgradeCost { get; set; }
        
        /// <summary>
        /// Current number of students
        /// </summary>
        public ulong Students { get; set; }

        /// <summary>
        /// Current number of rooms
        /// </summary>
        public ulong Rooms { get; set; }

        /// <summary>
        /// Current number of floors
        /// </summary>
        public ulong Floors { get; set; }

        /// <summary>
        /// Current number of dorms
        /// </summary>
        public ulong Dorms { get; set; }

        /// <summary>
        /// Current number of estates
        /// </summary>
        public ulong Estates { get; set; }

        /// <summary>
        /// Current time
        /// </summary>
        private int time=1;

        /// <summary>
        /// List of random events
        /// </summary>
        private List<RandomEvent> randomEvents = new List<RandomEvent>();

        /// <summary>
        /// Enum used to control the buying mode
        /// </summary>
        private enum Mode
        {
            Single,
            Proportional
        }

        /// <summary>
        /// Current buying mode
        /// </summary>
        private Mode mode;
        
        /// <summary>
        /// Creates new object of the type FormMain
        /// </summary>
        public FormMain()
        {
            InitializeComponent();
            timerRefresh.Start();
            mode = Mode.Single;

            StudentBaseGenerationRate = 1;
            StudentGenerationRate = 2;
            RoomGenerationRate = 3;
            FloorGenerationRate = 3;
            DormGenerationRate = 2;

            BaseStudentGenerationUpgradeCost = 10;
            StudentGenerationUpgradeCost = 10;
            RoomGenerationUpgradeCost = 30;
            FloorGenerationUpgradeCost = 10;
            DormGenerationUpgradeCost = 20;

            //Adding new events.
            randomEvents.Add(new RandomEvent(new double[] { 0.0, 0.7, 0.0, 0.0, 0.0 }, 1, "Gas explosion!", "70% of rooms are completely anihiltated"));
            randomEvents.Add(new RandomEvent(new double[] { 0.5, 0.0, 0.0, 0.0, 0.0 }, 2, "Exams!", "You lose 50% of your students :<"));
            randomEvents.Add(new RandomEvent(new double[] { 0.0, 0.0, 0.3, 0.0, 0.0 }, 3, "Fire!", "You lose 30% of your floors :<"));


        }

        /// <summary>
        /// Checks if any conditional event should take place.
        /// </summary>
        private void CheckConditionalEvents()
        {
            if ((Rooms!=0) && (Students / Rooms > 150))
            {
                MessageBox.Show("You lose 40% of your students", "Your rooms are overcrowded!");
                Students -= (ulong)(Students * 0.4);
            }

            if ((Floors != 0) && (Rooms / Floors > 90))
            {
                MessageBox.Show("You lose 50% of your rooms", "Too many rooms, not enough floors");
                Rooms -= (ulong)(Rooms * 0.5);
            }

            if ((Dorms != 0) && (Floors / Dorms > 100))
            {
                MessageBox.Show("You lose 65% of your floors","You can't safely build dorms that high!");
                Floors -= (ulong)(Floors * 0.65);
            }

            if ((Estates != 0) && (Dorms / Estates > 80))
            {
                MessageBox.Show("You lose 75% of your estates!", "Your estates are too large to be efficiently managed!");
                Dorms -= (ulong)(Dorms * 0.75);
            }
        }

        /// <summary>
        /// Updates the amount of resources.
        /// </summary>
        private void UpdateResources()
        {
            Students += (ulong)StudentBaseGenerationRate;
            Students += (ulong)(Rooms * StudentGenerationRate);
            Rooms += (ulong)(Floors * RoomGenerationRate);
            Floors += (ulong)(Dorms * FloorGenerationRate);
            Dorms += (ulong)(Estates * DormGenerationRate);
        }

        /// <summary>
        /// Updates the labels displaying the amount of resources.
        /// </summary>
        private void UpdateDisplay()
        {
            labelStudents.Text = Students.ToString();
            labelRooms.Text = Rooms.ToString();
            labelFloors.Text = Floors.ToString();
            labelDorms.Text = Dorms.ToString();
            labelEstates.Text = Estates.ToString();

            labelStudentGenerationRate.Text = (StudentGenerationRate*Rooms + StudentBaseGenerationRate).ToString();
            labelRoomGenerationRate.Text = (RoomGenerationRate*Floors).ToString();
            labelFloorGenerationRate.Text = (Dorms * FloorGenerationRate).ToString();
            labelDormGenerationRate.Text = (Estates * DormGenerationRate).ToString();
        }

        /// <summary>
        /// Enables and disables the buttons as needed.
        /// </summary>
        private void UpdateButtons()
        {
            if (mode == Mode.Single)
            {
                buttonBuyRooms.Enabled = Students >= roomPrice;
                buttonBuyFloors.Enabled = Rooms >= floorPrice;
                buttonBuyDorms.Enabled = Floors >= dormPrice;
                buttonBuyEstates.Enabled = Dorms >= estatePrice;
            } 
            else
            {
                //calculates if the buttons should remain enabled
                ulong roomsTotal = (ulong)((double)Students/roomPrice * 0.5);
                ulong floorsTotal = (ulong)((double)Rooms/floorPrice * 0.5);
                ulong dormsTotal = (ulong)((double)Floors/dormPrice * 0.5);
                ulong estatesTotal = (ulong)((double)Dorms/estatePrice * 0.5);
                buttonBuyRooms.Enabled =  roomsTotal>0;
                buttonBuyFloors.Enabled =  floorsTotal>0;
                buttonBuyDorms.Enabled =  dormsTotal>0;
                buttonBuyEstates.Enabled =  estatesTotal>0;

            }
        }

        /// <summary>
        /// Function generating random events.
        /// </summary>
        private void DoRandomEvent()
        {
            Random random = new Random();
            int specificNumber = random.Next(1,4);
            RandomEvent currentRandomEvent = null;
            foreach(RandomEvent randomEvent in randomEvents)
            {
                if (randomEvent.SpecificNumber == specificNumber)
                {
                    currentRandomEvent = randomEvent;
                    break;
                }
            }

            //Apply losses
            Students -= (ulong)(currentRandomEvent.Losses[0] * Students);
            Rooms -= (ulong)(currentRandomEvent.Losses[1] * Rooms);
            Floors -= (ulong)(currentRandomEvent.Losses[2] * Floors);
            Dorms -= (ulong)(currentRandomEvent.Losses[3] * Dorms);
            Estates -= (ulong)(currentRandomEvent.Losses[4] * Estates);

            MessageBox.Show(currentRandomEvent.Description, currentRandomEvent.Title);
        }

        /// <summary>
        /// Changes the mode when the button's clicked.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ButtonChangeMode_Click(object sender, EventArgs e)
        {
            if (mode == Mode.Proportional)
            {
                buttonChangeMode.Text = "Buying mode: Single";
                mode = Mode.Single;
            }
            else
            {
                buttonChangeMode.Text = "Buying mode: Proportional";
                mode = Mode.Proportional;
            }
        }

        /// <summary>
        /// Function called by the timer every second. Updates the resources and buttons.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void TimerRefresh_Tick(object sender, EventArgs e)
        {
          
            time++;

            if (time % 120 == 0)
            {
                DoRandomEvent();
            }

            UpdateResources();
            UpdateDisplay();
            UpdateButtons();
            CheckConditionalEvents();
        }

        /// <summary>
        /// Buys a certain amount of rooms based on the buying mode.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ButtonBuyRooms_Click(object sender, EventArgs e)
        {
            if (mode == Mode.Single)
            {
                Rooms++;
                Students -= roomPrice;
            }
            else
            {
                ulong roomsToBuy = (ulong)((double)Students / roomPrice * 0.5);
                Rooms += roomsToBuy;
                Students -= roomsToBuy * roomPrice;
            }
            UpdateDisplay();
            UpdateButtons();
        }

        /// <summary>
        /// Buys a certain amount of floors based on the buying mode.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ButtonBuyFloors_Click(object sender, EventArgs e)
        {
            if (mode == Mode.Single)
            {
                Floors++;
                Rooms -= floorPrice;
            }
            else
            {
                ulong floorsToBuy = (ulong)((double)Rooms / floorPrice * 0.5);
                Floors += floorsToBuy;
                Rooms -= floorsToBuy * floorPrice;
            }
            UpdateDisplay();
            UpdateButtons();
        }

        /// <summary>
        /// Buys a certain amount of dorms based on the buying mode.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ButtonBuyDorms_Click(object sender, EventArgs e)
        {
            if(mode == Mode.Single)
            {
                Dorms++;
                Floors -= dormPrice;
            }
            else
            {
                ulong dormsToBuy = (ulong)((double)Floors / dormPrice * 0.5);
                Dorms += dormsToBuy;
                Floors -= dormsToBuy * dormPrice;
            }
            UpdateDisplay();
            UpdateButtons();
        }

        /// <summary>
        /// Buys a certain amount of estates based on the buying mode.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ButtonBuyEstates_Click(object sender, EventArgs e)
        {
            if(mode == Mode.Single)
            {
                Estates++;
                Dorms -= estatePrice;
            }
            else
            {
                ulong estatesToBuy = (ulong)((double)Dorms / estatePrice * 0.5);
                Estates += estatesToBuy;
                Dorms -= estatesToBuy * estatePrice;
            }
            UpdateDisplay();
            UpdateButtons();
        }

        /// <summary>
        /// Opens 'upgrade' form.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ToolStripButtonUpgrade_Click(object sender, EventArgs e)
        {
            FormUpgrades formUpgrades = new FormUpgrades(this);
            formUpgrades.Show();
        }

        /// <summary>
        /// Opens 'about' form.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ToolStripButtonAbout_Click(object sender, EventArgs e)
        {
            FormAbout formAbout = new FormAbout();
            formAbout.Show();
        }

        
    }
}
